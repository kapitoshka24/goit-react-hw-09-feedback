{"version":3,"sources":["redux/feedbacks/feedbacks-selectors.js","components/Statistics.js","redux/feedbacks/feedbacks-actions.js","components/FeedbackOptions.js","components/Section.js","components/Notification.js","App.js","redux/feedbacks/feedbacks-reducers.js","redux/store.js","index.js"],"names":["getFeedbacks","state","feedbacks","Statistics","useSelector","countTotalFeedback","Object","values","reduce","prev","curr","entries","map","string","key","value","charAt","toUpperCase","slice","shortId","generate","good","toFixed","addFeedback","createAction","initialState","neutral","bad","reducer","action","type","Error","FeedbackOptions","dispatch","useDispatch","useReducer","dispatchState","useEffect","onLeaveFeedback","evt","target","innerHTML","toLowerCase","className","keys","onClick","Section","title","children","Notification","message","App","checkIfEmpty","createReducer","actions","_","payload","store","configureStore","feedbacksReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAAaA,EAAe,SAACC,GAAD,OAAWA,EAAMC,W,OCK9B,SAASC,IACtB,IAAMD,EAAYE,YAAYJ,GAMxBK,EAAqB,WACzB,GAAIH,EACF,OAAOI,OAAOC,OAAOL,GAAWM,QAAO,SAACC,EAAMC,GAAP,OAAiBD,EAAQC,IAAO,IAS3E,OACE,qCACE,4CAECJ,OAAOK,QAAQT,GAAWU,KAAI,gBAnBfC,EAmBe,mBAAEC,EAAF,KAAOC,EAAP,YAC7B,+BApBcF,EAqBAC,EApBXD,EAAOG,OAAO,GAAGC,cAAgBJ,EAAOK,MAAM,IAmBjD,KACsBH,IADdI,IAAQC,eAKlB,wCAAWf,OACX,oDAhB8B,IAAzBA,KACDH,EAAUmB,KAAOhB,IAAwB,KAAKiB,UAChD,EAcF,U,kBChCOC,EAAcC,YAAa,yBCGlCC,EAAe,CAAEJ,KAAM,EAAGK,QAAS,EAAGC,IAAK,GAC3CC,EAAU,SAAC3B,EAAO4B,GACtB,OAAQA,EAAOC,MACb,IAAK,OACH,OAAO,2BAAK7B,GAAZ,IAAmBoB,KAAMpB,EAAMoB,KAAO,IACxC,IAAK,UACH,OAAO,2BAAKpB,GAAZ,IAAmByB,QAASzB,EAAMyB,QAAU,IAC9C,IAAK,MACH,OAAO,2BAAKzB,GAAZ,IAAmB0B,IAAK1B,EAAM0B,IAAM,IACtC,QACE,MAAM,IAAII,QAID,SAASC,IACtB,IAAMC,EAAWC,cAEjB,EAA+BC,qBAAWP,EAASH,GAAnD,mBAAOxB,EAAP,KAAcmC,EAAd,KACAC,qBAAU,kBAAMJ,EAASV,EAAYtB,MAAS,CAACgC,EAAUhC,IAEzD,IAAMqC,EAAkB,SAACC,GAGvB,OAFYA,EAAIC,OAAOC,UAAUC,eAG/B,IAAK,OACHN,EAAc,CAAEN,KAAM,SACtB,MACF,IAAK,UACHM,EAAc,CAAEN,KAAM,YACtB,MACF,IAAK,MACHM,EAAc,CAAEN,KAAM,QACtB,MACF,QACE,MAAM,IAAIC,QAQhB,OACE,qBAAKY,UAAU,QAAf,SACGrC,OAAOsC,KAAK3C,GAAOW,KAAI,SAACE,GAAD,OACtB,wBACE6B,UAAU,aAEVE,QAASP,EAHX,UAPczB,EAYAC,EAXXD,EAAOG,OAAO,GAAGC,cAAgBJ,EAAOK,MAAM,KAQ1CC,IAAQC,YATF,IAACP,OCxCtB,IAYeiC,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACGD,GAAS,6BAAKA,IACdC,MCGUC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,mBAAGP,UAAU,eAAb,SAA6BO,K,MCMpD,SAASC,IACtB,IAAMjD,EAAYE,YAAYJ,GAExBoD,EACgE,IAApE9C,OAAOC,OAAOL,GAAWM,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,IAAM,GAE/D,OACE,qCACE,cAAC,EAAD,CAASqC,MAAM,6BAAf,SACE,cAACf,EAAD,MAEDoB,EACC,cAAC,EAAD,UACE,cAACjD,EAAD,MAGF,cAAC,EAAD,CAAc+C,QAAQ,yB,WChBfhD,EAJGmD,YAFG,CAAEhC,KAAM,EAAGK,QAAS,EAAGC,IAAK,GAElB,eAC5B2B,GAAsB,SAACC,EAAD,YAAMC,YCGhBC,EANDC,YAAe,CAC3B9B,QAAS,CACP1B,UAAWyD,KCCfC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAACN,EAAD,QAGJY,SAASC,eAAe,W","file":"static/js/main.3d41bf0d.chunk.js","sourcesContent":["export const getFeedbacks = (state) => state.feedbacks;\r\n","import React from \"react\";\r\nimport shortId from \"shortid\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getFeedbacks } from \"../redux/feedbacks/feedbacks-selectors\";\r\n\r\nexport default function Statistics() {\r\n  const feedbacks = useSelector(getFeedbacks);\r\n\r\n  const capitalize = (string) => {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  };\r\n\r\n  const countTotalFeedback = () => {\r\n    if (feedbacks)\r\n      return Object.values(feedbacks).reduce((prev, curr) => (prev += curr), 0);\r\n  };\r\n\r\n  const countPositiveFeedbackPercentage = () => {\r\n    return countTotalFeedback() !== 0\r\n      ? ((feedbacks.good / countTotalFeedback()) * 100).toFixed()\r\n      : 0;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h2>Statistics</h2>\r\n\r\n      {Object.entries(feedbacks).map(([key, value]) => (\r\n        <p key={shortId.generate()}>\r\n          {capitalize(key)}: {value}\r\n        </p>\r\n      ))}\r\n\r\n      <p>Total: {countTotalFeedback()}</p>\r\n      <p>Positive feedback: {countPositiveFeedbackPercentage()}%</p>\r\n    </>\r\n  );\r\n}\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const addFeedback = createAction(\"feedbacks/addFeedback\");\r\n","import React, { useEffect, useReducer } from \"react\";\r\nimport shortId from \"shortid\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addFeedback } from \"../redux/feedbacks/feedbacks-actions\";\r\n\r\nconst initialState = { good: 0, neutral: 0, bad: 0 };\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"good\":\r\n      return { ...state, good: state.good + 1 };\r\n    case \"neutral\":\r\n      return { ...state, neutral: state.neutral + 1 };\r\n    case \"bad\":\r\n      return { ...state, bad: state.bad + 1 };\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n\r\nexport default function FeedbackOptions() {\r\n  const dispatch = useDispatch();\r\n\r\n  const [state, dispatchState] = useReducer(reducer, initialState);\r\n  useEffect(() => dispatch(addFeedback(state)), [dispatch, state]);\r\n\r\n  const onLeaveFeedback = (evt) => {\r\n    const key = evt.target.innerHTML.toLowerCase();\r\n\r\n    switch (key) {\r\n      case \"good\":\r\n        dispatchState({ type: \"good\" });\r\n        break;\r\n      case \"neutral\":\r\n        dispatchState({ type: \"neutral\" });\r\n        break;\r\n      case \"bad\":\r\n        dispatchState({ type: \"bad\" });\r\n        break;\r\n      default:\r\n        throw new Error();\r\n    }\r\n  };\r\n\r\n  const capitalize = (string) => {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"stats\">\r\n      {Object.keys(state).map((key) => (\r\n        <button\r\n          className=\"stats__btn\"\r\n          key={shortId.generate()}\r\n          onClick={onLeaveFeedback}\r\n        >\r\n          {capitalize(key)}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    {title && <h2>{title}</h2>}\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.element.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => <p className=\"notification\">{message}</p>;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React from \"react\";\nimport Statistics from \"./components/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Section from \"./components/Section\";\nimport Notification from \"./components/Notification\";\nimport \"./styles/main.scss\";\nimport { useSelector } from \"react-redux\";\nimport { getFeedbacks } from \"./redux/feedbacks/feedbacks-selectors\";\n\nexport default function App() {\n  const feedbacks = useSelector(getFeedbacks);\n\n  const checkIfEmpty =\n    Object.values(feedbacks).reduce((prev, curr) => prev + curr, 0) !== 0;\n\n  return (\n    <>\n      <Section title=\"Please leave your feedback\">\n        <FeedbackOptions></FeedbackOptions>\n      </Section>\n      {checkIfEmpty ? (\n        <Section>\n          <Statistics />\n        </Section>\n      ) : (\n        <Notification message=\"No feedback given\" />\n      )}\n    </>\n  );\n}\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport * as actions from \"./feedbacks-actions\";\r\n\r\nconst initialValue = { good: 0, neutral: 0, bad: 0 };\r\n\r\nconst feedbacks = createReducer(initialValue, {\r\n  [actions.addFeedback]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default feedbacks;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport feedbacksReducer from \"./feedbacks/feedbacks-reducers\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    feedbacks: feedbacksReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}